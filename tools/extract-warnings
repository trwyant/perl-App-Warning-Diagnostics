#!/usr/bin/env perl

use 5.010;

use strict;
use warnings;

use Getopt::Long 2.33 qw{ :config auto_version };
use Pod::Usage;

our $VERSION = '0.000_010';

my %opt;

GetOptions( \%opt,
    help => sub { pod2usage( { -verbose => 2 } ) },
) or pod2usage( { -verbose => 0 } );

my @possible_builtins;

{
    local $/ = undef;	# Slurp mode
    open my $fh, '<', $INC{'warnings.pm'}
	or die "Unable to open warnings.pm: $!\n";
    my $source = <$fh>;
    close $fh;
    # (
    $source =~ m/ ( ^ \Qour %Bits = (\E [^)]+ \); $ ) /smx
	or die "Unable to find definition of %Offsets hash\n";
    my $hash = $1;

    while ( $hash =~ m/ ' ( [\w:]+ ) ' \s* => \s* "[^"]+" \s* , /smxg ) {
	push @possible_builtins, "$1";
    }
}

my ( undef, undef, undef, $day, $mon, $yr ) = localtime;
my $date = sprintf '%04d-%02d-%02d', $yr + 1900, $mon + 1, $day;

my $replacement = <<"EOD";
## BEGIN REPLACEMENT

# The following code is replaced by tools/extract-warnings. Do not edit.
# Generated $date by Perl $^V using warnings $warnings::VERSION

my \@possible_builtins = qw{
EOD

foreach ( sort @possible_builtins ) {
    $replacement .= "    $_\n";
}

$replacement .= <<'EOD';
};

## END REPLACEMENT
EOD

{
    my $file = 'lib/App/Warning/Diagnostics.pm';
    local $/ = undef;	# Slurp mode
    open my $fh, '<', $file
	or die "Unable to open $file for input: $!\n";
    my $source = <$fh>;
    close $fh;

    # The following regular expression is a bit convoluted in order to
    # get Perl to parse it correctly:
    # * I could not just qualify it /sm and omit superfluous spaces,
    #   because Perl parsed the resultant '... $.*? ...' as containing
    #   punctuation variable $.
    # * I could not throw \Q...\E around the hash marks, because that
    #   tickles an outstanding bug in the regular expression parser.
    $source =~ s/ ^ [#][#] \Q BEGIN REPLACEMENT\E $
    .*?
    ^ [#][#] \Q END REPLACEMENT\E $ /$replacement/smx
	or die "Failed to replace code\n";
    open $fh, '>', $file
	or die "Unable to open $file for output: $!\n";
    print { $fh } $source;
    close $fh;
}

__END__

=head1 TITLE

extract-warnings - Extract warning categories from warnings.pm.

=head1 SYNOPSIS

 extract-warnings
 extract-warnings --help
 extract-warnings --version

=head1 OPTIONS

=head2 --help

This option displays the documentation for this script. The script then
exits.

=head2 --version

This option displays the version of this script. The script then exits.

=head1 DETAILS

This Perl code extracts the warning categories from F<warnings.pm> and
inserts them into F<lib/App/Warning/Diagnostics.pm>. It should be run
under the highest version of Perl you can get your hands on.

This is an incredible kluge, but there appears to be no way to extract
the built-in warning categories from F<warnings.pm>. Oh, there are
various promising-looking things accessable (such as
C<%warnings::Bits>), but these are modified by C<warnings::register>,
and there is no way to ensure that we are accessing a pristine copy.

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2021 by Thomas R. Wyant, III

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory LICENSES.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

# ex: set textwidth=72 :
